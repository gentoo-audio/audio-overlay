From 01e34e40a896165f8ac6ebf85bab2e38e900d44b Mon Sep 17 00:00:00 2001
From: David Runge <dave@sleepmap.de>
Date: Wed, 21 Mar 2018 16:15:12 +0100
Subject: [PATCH] CMakeLists.txt: Changing check for SUPERNOVA to be check for
 NOVA_DISK_IO, so default builds won't fail, if the SuperCollider sources are
 not around during build time.

---
 CMakeLists.txt | 37 ++++++++++++++++++++-----------------
 1 file changed, 20 insertions(+), 17 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index cd9d782b6..96a993a18 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -12,9 +12,12 @@ if (NOT SYSTEM_STK)
   endif()
 endif()
 
-if (SUPERNOVA)
+if (NOVA_DISK_IO)
   if (NOT EXISTS ${SC_PATH}/external_libraries/nova-tt/CMakeLists.txt)
-    message(FATAL_ERROR "The nova-tt submodule in the SuperCollider repository is missing (required for SuperNova plugins). This probably means you forgot to clone submodules. To fix this, run `git submodule update --init` from the root folder of the SuperCollider repository")
+    message(FATAL_ERROR "The nova-tt submodule in the SuperCollider repository
+    is missing (required for NovaDiskIO plugin). This probably means you forgot
+    to clone submodules. To fix this, run `git submodule update --init` from
+    the root folder of the SuperCollider repository")
   endif()
 endif()
 
@@ -31,9 +34,9 @@ add_custom_target(uninstall
 
 find_package(SuperCollider3)
 if (NOT SC_FOUND)
-	message(SEND_ERROR "cannot find SuperCollider3 headers. Set the variable SC_PATH.")
+  message(SEND_ERROR "cannot find SuperCollider3 headers. Set the variable SC_PATH.")
 else()
-	message(STATUS "Using SC source located at ${SC_PATH}")
+  message(STATUS "Using SC source located at ${SC_PATH}")
 endif()
 
 include("${SC_PATH}/SCVersion.txt")
@@ -41,9 +44,9 @@ set(PROJECT_VERSION "${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}${PROJECT_
 message(STATUS "Building plugins for SuperCollider version: ${PROJECT_VERSION}")
 
 if(CMAKE_SYSTEM_NAME MATCHES "Linux" AND NOT CMAKE_VERSION VERSION_LESS SUPERNOVA_CMAKE_MINVERSION)
-	option(SUPERNOVA "Build plugins for supernova" ON)
+  option(SUPERNOVA "Build plugins for supernova" ON)
 else()
-	option(SUPERNOVA "Build plugins for supernova" OFF)
+  option(SUPERNOVA "Build plugins for supernova" OFF)
 endif()
 
 option(AY "Build with AY ugens" ON)
@@ -58,7 +61,7 @@ option(SYSTEM_STK "Use STK libraries from system" OFF)
 option(NOVA_DISK_IO "Build with Nova's DiskIO UGens. Requires boost source tree, break warranty & eats your children." OFF)
 
 if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
-	set(CMAKE_COMPILER_IS_CLANG 1)
+  set(CMAKE_COMPILER_IS_CLANG 1)
 endif()
 
 if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
@@ -97,20 +100,20 @@ if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_COMPILER_IS_CLANG)
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfpmath=sse")
     endif()
 
-	if(NATIVE)
-		add_definitions(-march=native)
-	endif()
+  if(NATIVE)
+    add_definitions(-march=native)
+  endif()
 
-	if(CPP11)
+  if(CPP11)
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
-		if(CMAKE_COMPILER_IS_CLANG)
-			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
-		endif()
-	endif()
+    if(CMAKE_COMPILER_IS_CLANG)
+      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")
+    endif()
+  endif()
 endif()
 if(MINGW)
-	set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mstackrealign")
-	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mstackrealign")
+  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mstackrealign")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mstackrealign")
 endif()
 
 if (NOVA_SIMD)
